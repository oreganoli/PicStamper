name: Build

on: [push]

jobs:
  build_deploy_issuer:
    name: Build and deploy auxiliary lambdas
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      CODE_BUCKET: ${{ secrets.CODE_BUCKET }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v2
      - name: Install dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore
      - name: Zip up files
        uses: montudor/action-zip@v1
        with:
          args: zip -qq -rj PicStamperLambdas.zip PicStamperLambdas/bin/Release/net6.0
      - name: Send code to S3
        run: "aws s3 cp ./PicStamperLambdas.zip s3://$CODE_BUCKET/PicStamperLambdas.zip"
      - name: Update url issuer lambda code
        run: "aws lambda update-function-code --function-name PicStamperLinkIssuer --s3-bucket $CODE_BUCKET --s3-key PicStamperLambdas.zip"
      - name: Update url issuer lambda config
        run: "aws lambda update-function-configuration --function-name PicStamperLinkIssuer --handler PicStamperLambdas::UrlIssuer.Function::Handler"
      - name: Update job starter lambda code
        run: "aws lambda update-function-code --function-name PicStamperJobStarter --s3-bucket $CODE_BUCKET --s3-key PicStamperLambdas.zip"
      - name: Update job starter lambda config
        run: "aws lambda update-function-configuration --function-name PicStamperJobStarter --handler PicStamperLambdas::JobStarter.Function::Handler"
      - name: Update job lister lambda code
        run: "aws lambda update-function-code --function-name PicStamperJobLister --s3-bucket $CODE_BUCKET --s3-key PicStamperLambdas.zip"
      - name: Update job lister lambda config
        run: "aws lambda update-function-configuration --function-name PicStamperJobLister --handler PicStamperLambdas::JobLister.Function::Handler"
  build_deploy_main:
    name: Build and deploy main PicStamper lambda
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      CODE_BUCKET: ${{ secrets.CODE_BUCKET }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v2
      - name: Install dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore
      - name: Make deployment package directory
        run: "mkdir main-deploy"
      - name: Prepare deployment package (copy main build artifacts)
        run: "cp PicStamperMain/bin/Release/net6.0/*.dll PicStamperMain/bin/Release/net6.0/*.json PicStamperMain/bin/Release/net6.0/*.pdb  main-deploy"
      - name: Prepare deployment package (copy native dependencies)
        run: "cp PicStamperMain/bin/Release/net6.0/runtimes/linux-x64/native/libSkiaSharp.so main-deploy"
      - name: Prepare deployment package (copy font files)
        run: "cp BebasNeue-Regular.ttf main-deploy"
      - name: Zip up package
        uses: montudor/action-zip@v1
        with:
          args: zip -qq -rj PicStamperMain.zip main-deploy
      - name: Send code to S3
        run: "aws s3 cp ./PicStamperMain.zip s3://$CODE_BUCKET/PicStamperMain.zip"
      - name: Update main lambda code
        run: "aws lambda update-function-code --function-name PicStamperMain --s3-bucket $CODE_BUCKET --s3-key PicStamperMain.zip"
      - name: Update main lambda config
        run: "aws lambda update-function-configuration --function-name PicStamperMain --handler PicStamperMain::PicStamperMain.Function::Handler"
  build_deploy_front:
    name: Build and deploy frontend
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      FRONTEND_BUCKET: ${{ secrets.FRONTEND_BUCKET }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Synchronize frontend files with S3
        run: "aws s3 sync ./frontend s3://$FRONTEND_BUCKET --delete"